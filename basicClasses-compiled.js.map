{"version":3,"sources":["basicClasses.js"],"names":[],"mappings":"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","file":"basicClasses-compiled.js","sourcesContent":["/**\n * Created by bede on 15/12/2016.\n */\n\n\nclass GameOption{\n    constructor(buttonText, onClick) {\n        this.buttonText = buttonText;\n        this.onClick = onClick;\n    }\n}\n\n\nclass Quality {\n    constructor(name) {\n        this.name = name;\n    }\n}\n\nclass QualityContainer {\n    constructor(qualities) {\n        this.qualities = qualities;\n    }\n\n    hasQualityWithName(name) {\n        for (let quality of this.qualities) {\n            if (quality.name == name) return true\n        }\n        return false;\n    }\n\n    removeQualityWithName(name) {\n        let idx, found = false;\n        for (let i=0; i<this.qualities.length; i++) {\n            let quality = this.qualities[i];\n            if (quality.name == name) {\n                idx = i;\n                found = true;\n                break;\n            }\n        }\n        if (found) {\n            this.qualities.splice(idx, 1);\n        }\n    }\n\n    addQuality(quality) {\n        this.qualities.add(quality);\n    }\n}\n\n\nclass Location extends QualityContainer{\n    constructor(name, descA, descB, defaultOptions, defaultQualities, traders) {\n        super(defaultQualities);\n        this.name = name;\n        this.descA = descA;\n        this.descB = descB;\n        this.defaultOptions = defaultOptions;\n        this.traders = traders;\n    }\n}\n\n\nclass Item {\n    constructor(name, options) {\n        this.name = name;\n        this.options = options || [];\n    }\n}\n\n\nclass ItemStack {\n    constructor(numberItems, item) {\n        this.numberItems = numberItems;\n        this.item = item;\n    }\n\n    toString() {\n        return `${this.numberItems} x ${this.item.name}`\n    }\n}\n\n\n/**\n * A Scheduler is a thin wrapper around setInterval.\n * It allows for setting and cancelling jobs with arbitrary labels.\n */\nclass Scheduler {\n    constructor() {\n        this._scheduleMap = new Map();\n    }\n\n    every(secs, label, fn) {\n        let id = setInterval(fn, secs);\n        this._scheduleMap.set(label, id);\n    };\n\n    after(secs, label, fn) {\n        let id = setTimeout(fn, secs);\n        this._scheduleMap.set(label, id);\n    }\n\n    cancel(label) {\n        let id = this._scheduleMap.get(label);\n        if (id) {\n            clearInterval(id);\n            clearTimeout(id);\n        }\n    }\n}\n\n\n/**\n * A Player holds information about what the current player can do.\n */\nclass Player extends QualityContainer {\n    constructor(name, location) {\n        super(new Set());\n        this.name = name;\n        this.itemStacks = new Set();\n        this.location = location;\n    }\n\n    /**\n     * Work out (and return!) all the possible options our\n     * human player can take at this point.\n     * @returns {Set} The set of all possible actions.\n     */\n    getOptions(){\n        let location = this.location, options = new Set();\n        location.defaultOptions.forEach(o => {\n            if (this.optionIsValid(o))\n                options.add(o);\n        });\n        this.itemStacks.forEach(stack => {\n            stack.item.options.forEach(option => {\n                if (this.optionIsValid(option))\n                    options.add(option);\n            })\n        });\n        return options;\n    }\n\n    /**\n     * Add a single item to our inventory.\n     * @param i The Item we're adding.\n     * @param noAnimate Stop the item being animated.\n     */\n    addItem(i, noAnimate) {\n        let stackFound = false;\n        for (let stack of this.itemStacks) {\n            if (stack.item.name == i.name) {\n                stack.numberItems++;\n                stackFound = true;\n                break;\n            }\n        }\n        if (!stackFound) {\n            this.itemStacks.add(\n                new ItemStack(1, i)\n            )\n        }\n\n        if (!stackFound) {\n            for (let stack of this.itemStacks) {\n                if (stack.item.name == i.name) {\n                    g.inventory.add(stack, !noAnimate);\n                }\n            }\n        } else {\n            // Todo: pulse the right one.\n            g.inventory.updateAll();\n        }\n    }\n\n    /**\n     * Add an ItemStack to our inventory, making sure that at all\n     * times there is only one stack for any given item.\n     * @param stack\n     */\n    addItemStack(stack) {\n        let num = stack.numberItems;\n        let item = stack.item;\n        for (let i=0; i<num; i++) {\n            this.addItem(item);\n        }\n    }\n\n    /**\n     * Wrapper method to move location and update the screen.\n     * @param location The new location we're moving to.\n     */\n    moveLocation(location) {\n        this.location = location;\n        updateDisplay();\n    }\n\n    /**\n     * Is an option valid, given the current state of the game?\n     * @param o The option to check.\n     * @returns {boolean}\n     */\n    optionIsValid(o) {\n        // Todo: option characteristics like location/items required.\n        return !!(!!(o) | !!(this));\n    }\n}\n\n\nclass LedgerInterface {\n    constructor() {\n        this.ledger = LedgerInterface._findLedger();\n    }\n\n    static _findLedger() {\n        return $(\"#ledger-items\")\n    }\n\n    add(actionTaken, noAnimate) {\n        if (!noAnimate) {\n            let element = $(`<li style=\"display: none;\">${actionTaken}</li>`);\n            this.ledger.append(element);\n            element.fadeIn(1000);\n        } else {\n            let element = $(`<li>${actionTaken}</li>`);\n            this.ledger.append(element);\n        }\n    }\n\n    write(action) {\n        this.add(action);\n    }\n}\n\n\nclass InventoryInterface {\n    constructor() {\n        this.inventory = InventoryInterface._findInventory();\n    }\n\n    static _findInventory() {\n        return $(\"#inventory-items\");\n    }\n\n    updateAllNoAnimate() {\n        currentInventoryItems().forEach(i => i.remove());\n        g.player.itemStacks.forEach(i => this.add(i));\n    }\n\n    updateAll(animate) {\n        if (animate) {\n            $(\"#inventory-items\").fadeOut(500, () => {\n                this.updateAllNoAnimate();\n                $(\"#inventory-items\").fadeIn(500);\n            });\n        }\n    }\n\n    add(itemStack, animate) {\n        if (animate) {\n            let elem = $(`<li style=\"display: none;\" class=\"inventory-item\">${itemStack.toString()}</li>`);\n            this.inventory.append(elem);\n            elem.fadeIn(500);\n        } else {\n            this.inventory.append(\n                $(`<li class=\"inventory-item\">${itemStack.toString()}</li>`)\n            );\n        }\n    }\n}\n\n\nclass Trader {\n    constructor(name, title, description, willSell, willBuy, willTrade) {\n        this.name = name;\n        this.title = title;\n        this.description = description;\n        this.willSell = willSell;\n        this.willBuy = willBuy;\n        this.willTrade = willTrade;\n    }\n}"]}